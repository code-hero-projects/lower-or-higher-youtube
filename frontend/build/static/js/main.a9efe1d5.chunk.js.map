{"version":3,"sources":["components/CountrySelector/CountrySelector.tsx","models/AsyncOperationState.ts","api/CodeHero/index.ts","api/CodeHero/CodeHeroApi.ts","api/CodeHero/urls.ts","redux/country/epics.ts","redux/country/country-slice.ts","redux/store.ts","containers/CountrySelector/CountrySelectorContainer.tsx","pages/HomePage/HomePage.tsx","App.tsx","index.tsx"],"names":["AsyncOperationState","CountrySelector","withStyles","createStyles","root","width","countries","selectedCountry","onCountrySelect","classes","FormControl","variant","className","Select","value","onChange","event","target","map","country","MenuItem","id","name","baseUrl","this","url","axios","get","then","response","data","process","getCountries","createAsyncThunk","CodeHeroApi","initialState","operationState","None","countrySlice","createSlice","reducers","selectCountry","state","action","payload","extraReducers","builder","addCase","pending","Loading","fulfilled","Success","rejected","Error","actions","countryReducer","reducer","store","configureStore","CountrySelectorContainer","useSelector","dispatch","useDispatch","useEffect","HomePage","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAqCO,ICrCKA,EDqCCC,EAAkBC,aAlChB,kBAAMC,YAAa,CAChCC,KAAM,CACJC,MAAO,YAgCoBH,EAnB/B,YAAyH,IAArFI,EAAoF,EAApFA,UAAWC,EAAyE,EAAzEA,gBAAiBC,EAAwD,EAAxDA,gBACtDJ,EAD8G,EAAvCK,QACvEL,KAMR,OACE,cAACM,EAAA,EAAD,CAAaC,QAAQ,WAAWC,UAAWR,EAA3C,SACE,cAACS,EAAA,EAAD,CACEC,MAAOP,EACPQ,SARe,SAACC,GACpBR,EAAgBQ,EAAMC,OAAOH,QAK3B,SAIGR,EAAUY,KAAI,SAACC,GAAD,OAAsB,cAACC,EAAA,EAAD,CAAUN,MAAOK,EAAQE,GAAzB,SAA+CF,EAAQG,MAArBH,EAAQE,c,kBC/B3ErB,O,eAAAA,I,qBAAAA,I,qBAAAA,I,kBAAAA,M,0CCEG,MCEf,WAGE,WAAYuB,GAAkB,yBAFtBA,aAEqB,EAC3BC,KAAKD,QAAUA,EAJnB,gDAOE,WACE,IAAME,EAAMD,KAAKD,QCZK,UDatB,OAAOG,IAAMC,IAAeF,GAAKG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YAT/D,KDFe,CAAgBC,yBGElBC,EAAeC,YAAkC,0BAA0B,kBAAMC,EAAYF,kBCMpGG,EAA6B,CACjC7B,UAAW,GACXC,gBAAiB,EACjB6B,eAAgBpC,EAAoBqC,MAGzBC,EAAeC,YAAY,CACtCjB,KAAM,UACNa,eACAK,SAAU,CACRC,cAAe,SAACC,EAAOC,GACrBD,EAAMnC,gBAAkBoC,EAAOC,UAGnCC,cAAe,SAACC,GACdA,EACGC,QAAQf,EAAagB,SAAS,SAACN,GAC9BA,EAAMN,eAAiBpC,EAAoBiD,WAE5CF,QAAQf,EAAakB,WAAW,SAACR,EAAOC,GACvC,IAAMrC,EAAYqC,EAAOC,QACzBF,EAAMpC,UAAYA,EAClBoC,EAAMnC,gBAAkBD,EAAU,GAAGe,GACrCqB,EAAMN,eAAiBpC,EAAoBmD,WAE5CJ,QAAQf,EAAaoB,UAAU,SAACV,GAC/BA,EAAMN,eAAiBpC,EAAoBqD,YAKpCZ,EAAkBH,EAAagB,QAA/Bb,cAEFc,EAAiBjB,EAAakB,QCxC9BC,EAAQC,YAAe,CAClCF,QAAS,CACPrC,QAASoC,KCAN,SAASI,IACd,MAAuDC,aAAY,SAAClB,GAAD,OAAsBA,EAAMvB,WAAvFb,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,gBAAiB6B,EAApC,EAAoCA,eAC9ByB,EAAWC,cAMjB,OAJAC,qBAAU,WACRF,EAAS7B,OACR,IAEI,cAAC/B,EAAD,CACLK,UAAWA,EACXC,gBAAiBA,EACjBC,gBAAiB,SAACa,GAAD,OAAgBwC,EAASpB,EAAcpB,KACxDe,eAAgBA,ICfb,SAAS4B,IACd,OAAO,cAACL,EAAD,ICOMM,MARf,WACE,OACE,8BACE,cAACD,EAAD,OCCNE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJY,SAASC,eAAe,W","file":"static/js/main.a9efe1d5.chunk.js","sourcesContent":["import { createStyles, FormControl, MenuItem, Select, withStyles, WithStyles } from \"@material-ui/core\";\r\nimport { AsyncOperationState, Country } from \"../../models\";\r\n\r\nconst styles = () => createStyles({\r\n  root: {\r\n    width: '100%'\r\n  }\r\n});\r\n\r\ninterface CountrySelectorProps {\r\n  countries: Country[];\r\n  selectedCountry: number;\r\n  onCountrySelect: (countryId: number) => void;\r\n  operationState: AsyncOperationState;\r\n}\r\n\r\ntype CountrySelectorPropsStyles = CountrySelectorProps & WithStyles<typeof styles>;\r\n\r\nfunction CountrySelectorComponent({ countries, selectedCountry, onCountrySelect, classes }: CountrySelectorPropsStyles) {\r\n  const { root } = classes;\r\n  \r\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    onCountrySelect(event.target.value as number);\r\n  };\r\n  \r\n  return (\r\n    <FormControl variant=\"outlined\" className={root}>\r\n      <Select\r\n        value={selectedCountry}\r\n        onChange={handleChange}\r\n      >\r\n        {countries.map((country: Country) => <MenuItem value={country.id} key={country.id}>{country.name}</MenuItem>)}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nexport const CountrySelector = withStyles(styles)(CountrySelectorComponent);\r\n","export enum AsyncOperationState {\r\n  None,\r\n  Loading,\r\n  Success,\r\n  Error\r\n}","import { CodeHeroApi } from \"./CodeHeroApi\";\r\n\r\nexport default new CodeHeroApi(process.env.REACT_APP_CODE_HERO_API_URL!);\r\n","import axios from \"axios\";\r\nimport { Country } from \"../../models\";\r\nimport { countryUrl } from \"./urls\";\r\n\r\nexport class CodeHeroApi {\r\n  private baseUrl: string;\r\n\r\n  constructor(baseUrl: string) {\r\n    this.baseUrl = baseUrl;\r\n  }\r\n\r\n  public getCountries(): Promise<Country[]> {\r\n    const url = this.baseUrl + countryUrl;\r\n    return axios.get<Country[]>(url).then(response => response.data);\r\n  }\r\n}","export const countryUrl = 'country';\r\nexport const videoUrl = 'country/{countryId}/video';","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { CodeHeroApi } from '../../api';\r\nimport { Country } from '../../models';\r\n\r\nexport const getCountries = createAsyncThunk<Country[], void>('country/fetchCountries', () => CodeHeroApi.getCountries());\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AsyncOperationState, Country } from '../../models';\r\nimport { getCountries } from './epics';\r\n\r\nexport interface CountryState {\r\n  countries: Country[];\r\n  selectedCountry: number;\r\n  operationState: AsyncOperationState;\r\n}\r\n\r\nconst initialState: CountryState = {\r\n  countries: [],\r\n  selectedCountry: 0,\r\n  operationState: AsyncOperationState.None\r\n}\r\n\r\nexport const countrySlice = createSlice({\r\n  name: 'country',\r\n  initialState,\r\n  reducers: {\r\n    selectCountry: (state, action: PayloadAction<number>) => {\r\n      state.selectedCountry = action.payload;\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getCountries.pending, (state) => {\r\n        state.operationState = AsyncOperationState.Loading;\r\n      })\r\n      .addCase(getCountries.fulfilled, (state, action) => {\r\n        const countries = action.payload;\r\n        state.countries = countries;\r\n        state.selectedCountry = countries[0].id;\r\n        state.operationState = AsyncOperationState.Success;\r\n      })\r\n      .addCase(getCountries.rejected, (state) => {\r\n        state.operationState = AsyncOperationState.Error;\r\n      });\r\n  }\r\n});\r\n\r\nexport const { selectCountry } = countrySlice.actions;\r\n\r\nexport const countryReducer = countrySlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { countryReducer } from './country';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    country: countryReducer\r\n  }\r\n});\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { CountrySelector } from \"../../components\";\r\nimport { getCountries, RootState, selectCountry } from \"../../redux\";\r\n\r\nexport function CountrySelectorContainer() {\r\n  const { countries, selectedCountry, operationState } = useSelector((state: RootState) => state.country);\r\n  const dispatch = useDispatch();\r\n  \r\n  useEffect(() => {\r\n    dispatch(getCountries());\r\n  }, []);\r\n\r\n  return <CountrySelector \r\n    countries={countries} \r\n    selectedCountry={selectedCountry} \r\n    onCountrySelect={(id: number) => dispatch(selectCountry(id))}\r\n    operationState={operationState}\r\n  />;\r\n}","import { CountrySelectorContainer } from \"../../containers\";\r\n\r\nexport function HomePage() {\r\n  return <CountrySelectorContainer />;\r\n}","import { HomePage } from \"./pages\";\n\nfunction App() {\n  return (\n    <div>\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}