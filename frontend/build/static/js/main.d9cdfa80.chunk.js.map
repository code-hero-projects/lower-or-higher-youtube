{"version":3,"sources":["components/CountrySelector/CountrySelector.tsx","models/AsyncOperationState.ts","api/CodeHero/CodeHeroApiClient.ts","api/CodeHero/CodeHeroApi.ts","api/CodeHero/index.ts","redux/country/epics.ts","redux/country/country-slice.ts","redux/store.ts","containers/CountrySelector/CountrySelectorContainer.tsx","pages/HomePage/HomePage.tsx","App.tsx","index.tsx"],"names":["AsyncOperationState","CountrySelector","withStyles","createStyles","root","width","countries","selectedCountry","onCountrySelect","classes","FormControl","variant","className","Select","value","onChange","event","target","map","country","MenuItem","id","name","CodeHeroApiClient","baseUrl","http","jsonParseReviver","undefined","this","window","url_","replace","fetch","method","headers","then","_response","processCountry","response","status","_headers","forEach","v","k","text","_responseText","result200","resultData200","JSON","parse","Array","isArray","item","push","CountryResponse","fromJS","throwException","Promise","resolve","processTest","countryId","Error","encodeURIComponent","processVideo","VideoResponse","data","regionCode","property","hasOwnProperty","_data","result","init","channel","views","thumbnail","ApiException","message","isApiException","obj","codeHeroApiClient","process","console","log","countryResponse","getCountries","createAsyncThunk","a","CodeHeroApi","initialState","operationState","None","countrySlice","createSlice","reducers","selectCountry","state","action","payload","extraReducers","builder","addCase","pending","Loading","fulfilled","Success","rejected","actions","countryReducer","reducer","store","configureStore","CountrySelectorContainer","useSelector","dispatch","useDispatch","useEffect","HomePage","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9cdfa80.chunk.js","sourcesContent":["import { createStyles, FormControl, MenuItem, Select, withStyles, WithStyles } from \"@material-ui/core\";\r\nimport { AsyncOperationState, Country } from \"../../models\";\r\n\r\nconst styles = () => createStyles({\r\n  root: {\r\n    width: '100%'\r\n  }\r\n});\r\n\r\ninterface CountrySelectorProps {\r\n  countries: Country[];\r\n  selectedCountry: number;\r\n  onCountrySelect: (countryId: number) => void;\r\n  operationState: AsyncOperationState;\r\n}\r\n\r\ntype CountrySelectorPropsStyles = CountrySelectorProps & WithStyles<typeof styles>;\r\n\r\nfunction CountrySelectorComponent({ countries, selectedCountry, onCountrySelect, classes }: CountrySelectorPropsStyles) {\r\n  const { root } = classes;\r\n  \r\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    onCountrySelect(event.target.value as number);\r\n  };\r\n  \r\n  return (\r\n    <FormControl variant=\"outlined\" className={root}>\r\n      <Select\r\n        value={selectedCountry}\r\n        onChange={handleChange}\r\n      >\r\n        {countries.map((country: Country) => <MenuItem value={country.id} key={country.id}>{country.name}</MenuItem>)}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nexport const CountrySelector = withStyles(styles)(CountrySelectorComponent);\r\n","export enum AsyncOperationState {\r\n  None,\r\n  Loading,\r\n  Success,\r\n  Error\r\n}","/* tslint:disable */\r\n/* eslint-disable */\r\n//----------------------\r\n// <auto-generated>\r\n//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)\r\n// </auto-generated>\r\n//----------------------\r\n// ReSharper disable InconsistentNaming\r\n\r\nexport class CodeHeroApiClient {\r\n  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };\r\n  private baseUrl: string;\r\n  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;\r\n\r\n  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {\r\n      this.http = http ? http : <any>window;\r\n      this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : \"\";\r\n  }\r\n\r\n  /**\r\n   * @return Success\r\n   */\r\n  country(): Promise<CountryResponse[]> {\r\n      let url_ = this.baseUrl + \"/api/v1/country\";\r\n      url_ = url_.replace(/[?&]$/, \"\");\r\n\r\n      let options_ = <RequestInit>{\r\n          method: \"GET\",\r\n          headers: {\r\n              \"Accept\": \"text/plain\"\r\n          }\r\n      };\r\n\r\n      return this.http.fetch(url_, options_).then((_response: Response) => {\r\n          return this.processCountry(_response);\r\n      });\r\n  }\r\n\r\n  protected processCountry(response: Response): Promise<CountryResponse[]> {\r\n      const status = response.status;\r\n      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\r\n      if (status === 200) {\r\n          return response.text().then((_responseText) => {\r\n          let result200: any = null;\r\n          let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\r\n          if (Array.isArray(resultData200)) {\r\n              result200 = [] as any;\r\n              for (let item of resultData200)\r\n                  result200!.push(CountryResponse.fromJS(item));\r\n          }\r\n          else {\r\n              result200 = <any>null;\r\n          }\r\n          return result200;\r\n          });\r\n      } else if (status !== 200 && status !== 204) {\r\n          return response.text().then((_responseText) => {\r\n          return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\r\n          });\r\n      }\r\n      return Promise.resolve<CountryResponse[]>(<any>null);\r\n  }\r\n\r\n  /**\r\n   * @return Success\r\n   */\r\n  test(): Promise<void> {\r\n      let url_ = this.baseUrl + \"/api/v1/test\";\r\n      url_ = url_.replace(/[?&]$/, \"\");\r\n\r\n      let options_ = <RequestInit>{\r\n          method: \"GET\",\r\n          headers: {\r\n          }\r\n      };\r\n\r\n      return this.http.fetch(url_, options_).then((_response: Response) => {\r\n          return this.processTest(_response);\r\n      });\r\n  }\r\n\r\n  protected processTest(response: Response): Promise<void> {\r\n      const status = response.status;\r\n      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\r\n      if (status === 200) {\r\n          return response.text().then((_responseText) => {\r\n          return;\r\n          });\r\n      } else if (status !== 200 && status !== 204) {\r\n          return response.text().then((_responseText) => {\r\n          return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\r\n          });\r\n      }\r\n      return Promise.resolve<void>(<any>null);\r\n  }\r\n\r\n  /**\r\n   * @return Success\r\n   */\r\n  video(countryId: number): Promise<VideoResponse[]> {\r\n      let url_ = this.baseUrl + \"/api/v1/country/{countryId}/video\";\r\n      if (countryId === undefined || countryId === null)\r\n          throw new Error(\"The parameter 'countryId' must be defined.\");\r\n      url_ = url_.replace(\"{countryId}\", encodeURIComponent(\"\" + countryId));\r\n      url_ = url_.replace(/[?&]$/, \"\");\r\n\r\n      let options_ = <RequestInit>{\r\n          method: \"GET\",\r\n          headers: {\r\n              \"Accept\": \"text/plain\"\r\n          }\r\n      };\r\n\r\n      return this.http.fetch(url_, options_).then((_response: Response) => {\r\n          return this.processVideo(_response);\r\n      });\r\n  }\r\n\r\n  protected processVideo(response: Response): Promise<VideoResponse[]> {\r\n      const status = response.status;\r\n      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\r\n      if (status === 200) {\r\n          return response.text().then((_responseText) => {\r\n          let result200: any = null;\r\n          let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\r\n          if (Array.isArray(resultData200)) {\r\n              result200 = [] as any;\r\n              for (let item of resultData200)\r\n                  result200!.push(VideoResponse.fromJS(item));\r\n          }\r\n          else {\r\n              result200 = <any>null;\r\n          }\r\n          return result200;\r\n          });\r\n      } else if (status !== 200 && status !== 204) {\r\n          return response.text().then((_responseText) => {\r\n          return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\r\n          });\r\n      }\r\n      return Promise.resolve<VideoResponse[]>(<any>null);\r\n  }\r\n}\r\n\r\nexport class CountryResponse implements ICountryResponse {\r\n  id?: number;\r\n  name?: string | undefined;\r\n  regionCode?: string | undefined;\r\n\r\n  constructor(data?: ICountryResponse) {\r\n      if (data) {\r\n          for (var property in data) {\r\n              if (data.hasOwnProperty(property))\r\n                  (<any>this)[property] = (<any>data)[property];\r\n          }\r\n      }\r\n  }\r\n\r\n  init(_data?: any) {\r\n      if (_data) {\r\n          this.id = _data[\"id\"];\r\n          this.name = _data[\"name\"];\r\n          this.regionCode = _data[\"regionCode\"];\r\n      }\r\n  }\r\n\r\n  static fromJS(data: any): CountryResponse {\r\n      data = typeof data === 'object' ? data : {};\r\n      let result = new CountryResponse();\r\n      result.init(data);\r\n      return result;\r\n  }\r\n\r\n  toJSON(data?: any) {\r\n      data = typeof data === 'object' ? data : {};\r\n      data[\"id\"] = this.id;\r\n      data[\"name\"] = this.name;\r\n      data[\"regionCode\"] = this.regionCode;\r\n      return data; \r\n  }\r\n}\r\n\r\nexport interface ICountryResponse {\r\n  id?: number;\r\n  name?: string | undefined;\r\n  regionCode?: string | undefined;\r\n}\r\n\r\nexport class VideoResponse implements IVideoResponse {\r\n  name?: string | undefined;\r\n  channel?: string | undefined;\r\n  views?: number;\r\n  thumbnail?: string | undefined;\r\n\r\n  constructor(data?: IVideoResponse) {\r\n      if (data) {\r\n          for (var property in data) {\r\n              if (data.hasOwnProperty(property))\r\n                  (<any>this)[property] = (<any>data)[property];\r\n          }\r\n      }\r\n  }\r\n\r\n  init(_data?: any) {\r\n      if (_data) {\r\n          this.name = _data[\"name\"];\r\n          this.channel = _data[\"channel\"];\r\n          this.views = _data[\"views\"];\r\n          this.thumbnail = _data[\"thumbnail\"];\r\n      }\r\n  }\r\n\r\n  static fromJS(data: any): VideoResponse {\r\n      data = typeof data === 'object' ? data : {};\r\n      let result = new VideoResponse();\r\n      result.init(data);\r\n      return result;\r\n  }\r\n\r\n  toJSON(data?: any) {\r\n      data = typeof data === 'object' ? data : {};\r\n      data[\"name\"] = this.name;\r\n      data[\"channel\"] = this.channel;\r\n      data[\"views\"] = this.views;\r\n      data[\"thumbnail\"] = this.thumbnail;\r\n      return data; \r\n  }\r\n}\r\n\r\nexport interface IVideoResponse {\r\n  name?: string | undefined;\r\n  channel?: string | undefined;\r\n  views?: number;\r\n  thumbnail?: string | undefined;\r\n}\r\n\r\nexport class ApiException extends Error {\r\n  message: string;\r\n  status: number;\r\n  response: string;\r\n  headers: { [key: string]: any; };\r\n  result: any;\r\n\r\n  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {\r\n      super();\r\n\r\n      this.message = message;\r\n      this.status = status;\r\n      this.response = response;\r\n      this.headers = headers;\r\n      this.result = result;\r\n  }\r\n\r\n  protected isApiException = true;\r\n\r\n  static isApiException(obj: any): obj is ApiException {\r\n      return obj.isApiException === true;\r\n  }\r\n}\r\n\r\nfunction throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {\r\n  if (result !== null && result !== undefined)\r\n      throw result;\r\n  else\r\n      throw new ApiException(message, status, response, headers, null);\r\n}","import { Country } from \"../../models\";\r\nimport { CodeHeroApiClient, CountryResponse } from \"./CodeHeroApiClient\";\r\n\r\nexport class CodeHeroApi {\r\n  private codeHeroApiClient: CodeHeroApiClient;\r\n\r\n  constructor() {\r\n    this.codeHeroApiClient = new CodeHeroApiClient(process.env.REACT_APP_CODE_HERO_API_URL);\r\n  }\r\n\r\n  public getCountries(): Promise<Country[]> {\r\n    console.log('called');  \r\n    return this.codeHeroApiClient\r\n      .country()\r\n      .then(countries => countries.map((countryResponse: CountryResponse) => {\r\n        return {\r\n          id: countryResponse.id!,\r\n          name: countryResponse.name!,\r\n          regionCode: countryResponse.regionCode!\r\n        }\r\n      }));\r\n  }\r\n}","import { CodeHeroApi } from \"./CodeHeroApi\";\r\n\r\nexport default new CodeHeroApi();\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { CodeHeroApi } from '../../api';\r\nimport { Country } from '../../models';\r\n\r\nexport const getCountries = createAsyncThunk<Country[], void>('country/fetchCountries', async() => CodeHeroApi.getCountries());\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AsyncOperationState, Country } from '../../models';\r\nimport { getCountries } from './epics';\r\n\r\nexport interface CountryState {\r\n  countries: Country[];\r\n  selectedCountry: number;\r\n  operationState: AsyncOperationState;\r\n}\r\n\r\nconst initialState: CountryState = {\r\n  countries: [],\r\n  selectedCountry: 0,\r\n  operationState: AsyncOperationState.None\r\n}\r\n\r\nexport const countrySlice = createSlice({\r\n  name: 'country',\r\n  initialState,\r\n  reducers: {\r\n    selectCountry: (state, action: PayloadAction<number>) => {\r\n      state.selectedCountry = action.payload;\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getCountries.pending, (state) => {\r\n        state.operationState = AsyncOperationState.Loading;\r\n      })\r\n      .addCase(getCountries.fulfilled, (state, action) => {\r\n        const countries = action.payload;\r\n        state.countries = countries;\r\n        state.selectedCountry = countries[0].id;\r\n        state.operationState = AsyncOperationState.Success;\r\n      })\r\n      .addCase(getCountries.rejected, (state) => {\r\n        state.operationState = AsyncOperationState.Error;\r\n      });\r\n  }\r\n});\r\n\r\nexport const { selectCountry } = countrySlice.actions;\r\n\r\nexport const countryReducer = countrySlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { countryReducer } from './country';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    country: countryReducer\r\n  }\r\n});\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { CountrySelector } from \"../../components\";\r\nimport { getCountries, RootState, selectCountry } from \"../../redux\";\r\n\r\nexport function CountrySelectorContainer() {\r\n  const { countries, selectedCountry, operationState } = useSelector((state: RootState) => state.country);\r\n  const dispatch = useDispatch();\r\n  \r\n  useEffect(() => {\r\n    dispatch(getCountries());\r\n  }, []);\r\n\r\n  return <CountrySelector \r\n    countries={countries} \r\n    selectedCountry={selectedCountry} \r\n    onCountrySelect={(id: number) => dispatch(selectCountry(id))}\r\n    operationState={operationState}\r\n  />;\r\n}","import { CountrySelectorContainer } from \"../../containers\";\r\n\r\nexport function HomePage() {\r\n  return <CountrySelectorContainer />;\r\n}","import { HomePage } from \"./pages\";\n\nfunction App() {\n  return (\n    <div>\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}