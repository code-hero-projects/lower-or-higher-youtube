/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class CodeHeroApiClient {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
      this.http = http ? http : <any>window;
      this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
  }

  /**
   * @return Success
   */
  country(): Promise<CountryResponse[]> {
      let url_ = this.baseUrl + "/api/v1/country";
      url_ = url_.replace(/[?&]$/, "");

      let options_ = <RequestInit>{
          method: "GET",
          headers: {
              "Accept": "text/plain"
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processCountry(_response);
      });
  }

  protected processCountry(response: Response): Promise<CountryResponse[]> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
              result200 = [] as any;
              for (let item of resultData200)
                  result200!.push(CountryResponse.fromJS(item));
          }
          else {
              result200 = <any>null;
          }
          return result200;
          });
      } else if (status !== 200 && status !== 204) {
          return response.text().then((_responseText) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          });
      }
      return Promise.resolve<CountryResponse[]>(<any>null);
  }

  /**
   * @return Success
   */
  test(): Promise<void> {
      let url_ = this.baseUrl + "/api/v1/test";
      url_ = url_.replace(/[?&]$/, "");

      let options_ = <RequestInit>{
          method: "GET",
          headers: {
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processTest(_response);
      });
  }

  protected processTest(response: Response): Promise<void> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          return;
          });
      } else if (status !== 200 && status !== 204) {
          return response.text().then((_responseText) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          });
      }
      return Promise.resolve<void>(<any>null);
  }

  /**
   * @return Success
   */
  video(countryId: number): Promise<VideoResponse[]> {
      let url_ = this.baseUrl + "/api/v1/country/{countryId}/video";
      if (countryId === undefined || countryId === null)
          throw new Error("The parameter 'countryId' must be defined.");
      url_ = url_.replace("{countryId}", encodeURIComponent("" + countryId));
      url_ = url_.replace(/[?&]$/, "");

      let options_ = <RequestInit>{
          method: "GET",
          headers: {
              "Accept": "text/plain"
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processVideo(_response);
      });
  }

  protected processVideo(response: Response): Promise<VideoResponse[]> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
              result200 = [] as any;
              for (let item of resultData200)
                  result200!.push(VideoResponse.fromJS(item));
          }
          else {
              result200 = <any>null;
          }
          return result200;
          });
      } else if (status !== 200 && status !== 204) {
          return response.text().then((_responseText) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          });
      }
      return Promise.resolve<VideoResponse[]>(<any>null);
  }
}

export class CountryResponse implements ICountryResponse {
  id?: number;
  name?: string | undefined;
  regionCode?: string | undefined;

  constructor(data?: ICountryResponse) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.id = _data["id"];
          this.name = _data["name"];
          this.regionCode = _data["regionCode"];
      }
  }

  static fromJS(data: any): CountryResponse {
      data = typeof data === 'object' ? data : {};
      let result = new CountryResponse();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["id"] = this.id;
      data["name"] = this.name;
      data["regionCode"] = this.regionCode;
      return data; 
  }
}

export interface ICountryResponse {
  id?: number;
  name?: string | undefined;
  regionCode?: string | undefined;
}

export class VideoResponse implements IVideoResponse {
  name?: string | undefined;
  channel?: string | undefined;
  views?: number;
  thumbnail?: string | undefined;

  constructor(data?: IVideoResponse) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.name = _data["name"];
          this.channel = _data["channel"];
          this.views = _data["views"];
          this.thumbnail = _data["thumbnail"];
      }
  }

  static fromJS(data: any): VideoResponse {
      data = typeof data === 'object' ? data : {};
      let result = new VideoResponse();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["name"] = this.name;
      data["channel"] = this.channel;
      data["views"] = this.views;
      data["thumbnail"] = this.thumbnail;
      return data; 
  }
}

export interface IVideoResponse {
  name?: string | undefined;
  channel?: string | undefined;
  views?: number;
  thumbnail?: string | undefined;
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
      super();

      this.message = message;
      this.status = status;
      this.response = response;
      this.headers = headers;
      this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
      return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
  if (result !== null && result !== undefined)
      throw result;
  else
      throw new ApiException(message, status, response, headers, null);
}